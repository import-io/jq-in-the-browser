[
  [
    "Empty query",
    [
      "",
      "  ",
      "#",
      "# 1",
      " #1"
    ],
    [
      [4],
      { "foo": "bar" }
    ]
  ],
  [
    "Identity",
    [
      ".",
      " .  "
    ],
    [
      [4],
      { "foo": "bar" }
    ]
  ],
  [
    "Array Index",
    [
      ".[0]",
      ".[-0]",
      ".[1 ]",
      ".[-1]",
      ".[ - 1 ]",
      ".[ 1][0]",
      ".[1] [1]",
      ".[1][1].x",
      ".[1][1].x[0]",
      ".[1][1].y[0]",
      ".[4]",
      ".[12]",
      ".[200]",
      ".[-5]",
      ".[-10]",
      ".[-200]",
      ".[4.1]",
      ".[-5.1]",
      ".[.1]",
      ".[-.1]",
      ".[.[6] - .[5]]",
      ".[1][.[6] - .[5]]"
    ],
    [
      [
        0,
        [1, { "x": ["y"] }],
        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
      ]
    ]
  ],
  [
    "Array Index - streams",
    [
      ".[1, 0]",
      ".[][2, 1, 0]"
    ],
    [[
      [1, 2, 3],
      [10, 20, 30]
    ]]
  ],
  [
    "Array Index on non-array - errors",
    [
      ".[0]"
    ],
    [
      false, 3, "foo", { "bar": 1 }
    ]
  ],
  [
    "Array Index on non-array - optional",
    [
      ".[0]?",
      ".[0] ?"
    ],
    [
      false, 3, "foo", { "bar": 1 }
    ]
  ],
  [
    "Array Index with non-numeric index - errors",
    [
      "[0][.]"
    ],
    [
      null, false, "foo", { "bar": 1 }
    ]
  ],
  [
    "Array Index with non-numeric index - optional",
    [
      "[0][.]?",
      "[0][.] ?"
    ],
    [
      null, false, "foo", { "bar": 1 }
    ]
  ],
  [
    "Object Identifier-Index",
    [
      ".foo",
      ".bar",
      ".hasOwnProperty",
      ".and",
      ".or",
      ".if",
      ".bar.x",
      ".bar .x",
      ".bar.foo",
      ".foo[1]",
      ".foo [1]",
      ".baz",
      ".baz.x",
      ".\"\"",
      ".\" \"",
      ".\"foo\"",
      ".\"foo \"",
      ".\" foo\"",
      ".\"hasOwnProperty\"",
      ".\"bar\".x",
      ".\"bar\" .x",
      ".bar.\"foo\"",
      ".\"foo\"[1]",
      ".\"foo\" [1]",
      ".\"2bar\"",
      ".\"a b\"",
      ".\"baz\"",
      ".\"baz\".\"x\""
    ],
    [
      {
        "foo": [3, 1],
        "bar": { "x": 3, "foo": 0.5 },
        "2bar": 1,
        "a b": "a b",
        "hasOwnProperty": "foo"
      }
    ]
  ],
  [
    "Object Identifier-Index - streams",
    [
      ".[].foo",
      ".[].\"foo\""
    ],
    [
      [{ "foo": 1 }, { "foo": 2 }]
    ]
  ],
  [
    "Object Identifier-Index on non-object - errors",
    [
      ".foo",
      ".longStringlongString123456789",
      ".longStringlongString1234567890",
      ".\"foo\"",
      ".\"longStringlongString123456789\"",
      ".\"longStringlongString1234567890\""
    ],
    [
      false, 3, "foo", [1, 2]
    ]
  ],
  [
    "Object Identifier-Index on non-object - optional",
    [
      ".foo?",
      ".foo ?",
      ".\"foo\"?",
      ".\"foo\" ?"
    ],
    [
      false, 3, "foo", [1, 2]
    ]
  ],
  [
    "Generic Object Index",
    [
      ".[\"\"]",
      ".[\" \"]",
      ".[\"foo\"]",
      ".[\"foo \"]",
      ".[\" foo\"]",
      ".[\"hasOwnProperty\"]",
      ".[\"bar\"].x",
      ".[\"bar\"] .x",
      ".bar[ \"foo\"]",
      ".[\"foo\"][1]",
      ".[\"foo\"] [1]",
      ".[\"2bar\"]",
      ".[\"a b\" ]",
      ".[\"baz\"]",
      ".[\"baz\"][\"x\"]",
      ".[.hasOwnProperty]",
      ".bar[.hasOwnProperty]"
    ],
    [
      {
        "foo": [3, 1],
        "bar": { "x": 3, "foo": 0.5 },
        "2bar": 1,
        "a b": "a b",
        "hasOwnProperty": "foo"
      }
    ]
  ],
  [
    "Generic Object Index - streams",
    [
      ".[\"bar\", \"foo\"]",
      ".[][\"baz\", \"bar\", \"foo\"]"
    ],
    [{
      "foo": { "foo": 1, "bar": 2, "baz": 3 },
      "bar": { "foo": 10, "bar": 20, "baz": 30 }
    }]
  ],
  [
    "Generic Object Index on non-object - errors",
    [
      ".[\"foo\"]",
      ".[\"longStringlongString123456789\"]",
      ".[\"longStringlongString1234567890\"]"
    ],
    [
      false, 3, "foo", [1, 2]
    ]
  ],
  [
    "Generic Object Index on non-object - optional",
    [
      ".[\"foo\"]?",
      ".[\"foo\"] ?"
    ],
    [
      false, 3, "foo", [1, 2]
    ]
  ],
  [
    "Generic Object Index with non-string index - errors",
    [
      "{\"foo\": \"bar\"}[.]"
    ],
    [
      null, false, 3, [1, 2], { "bar": 1 }
    ]
  ],
  [
    "Generic Object Index with non-string index - optional",
    [
      "{\"foo\": \"bar\"}[.]?",
      "{\"foo\": \"bar\"}[.] ?"
    ],
    [
      null, false, 3, [1, 2], { "bar": 1 }
    ]
  ],
  [
    "Array/String slice",
    [
      ".[0:0]", ".[0:1]", ".[1:0]", ".[2:4]", ".[4:2]", ".[3:100]",
      ".[-4:-2]", ".[-1:-3]", ".[-50:-3]", ".[-4:-100]",
      ".[:3]", ".[1:]", ".[-1:]", ".[:-3]", ".[-14:]", ".[:100]",
      ".[:2.1]", ".[:2.5]", ".[:2.8]", ".[:3.5]",
      ".[2.1:]", ".[2.5:]", ".[2.8:]", ".[3.5:]",
      ".[:-2.1]", ".[:-2.5]", ".[:-2.8]", ".[:-3.5]",
      ".[-2.1:]", ".[-2.5:]", ".[-2.8:]", ".[-3.5:]",
      "[.][100][:3]",
      ".[[.][100]:3]",
      ".[1:[.][100]]",
      ".[[.][100]:[.][100]]",
      "{a: 2, b: 4, x: .} | .x[.a:.b]"
    ],
    [
      [0, 3, "foo", -2, false, [true]],
      "Hello World!"
    ]
  ],
  [
    "Array/String slice - streams",
    [
      ".[0, 1: 2, 3]",
      ".[][0, 1: 2, 3]"
    ],
    [
      [[1, 2, 3], [10, 20, 30], [100, 200, 300]],
      ["123", "abc", "ABC"]
    ]
  ],
  [
    "Array/String slice on non-array/string - errors",
    [
      ".[:1]"
    ],
    [
      0, 3, false, true, {}, { "a": 1 }
    ]
  ],
  [
    "Array/String slice on non-array/string - optional",
    [
      ".[:1]?",
      ".[:1] ?"
    ],
    [
      0, 3, false, true, {}, { "a": 1 }
    ]
  ],
  [
    "Pipe",
    [
      ".a | .b",
      ".a|.b",
      "1 + .a.b[1] | 2"
    ],
    [
      {
        "a": {
          "b": [4, 10]
        }
      },
      {
        "a": {
          "b": ["oo", 7]
        }
      }
    ]
  ],
  [
    "Streams",
    [
      "[.a], .b",
      "[.a], .b | .[1]",
      "[.a], .b | .[-1]",
      ".a, .b[1]",
      "-.a, .b[1] + 2 * .a",
      "-.a, 2 * .a, .b[1] | .",
      "-.a, 2 * .a, .b[1] | ., .",
      "-.a, 2 * .a, .b[1] | []",
      "-.a, 2 * .a, .b[1] | [][]",
      "-.a, .b[] | 10 + .",
      ".b[], -.a | . + 10",
      ".b[], .b[] | . + .",
      ".b[], -.a, .b[] | . * 10",
      "-.a, .b[], -.a | 10 * .",
      "-(.a, .b[])",
      "-(.a, .b[]) + .a",
      "[.b[]]",
      "[(.b[])]",
      "[.a, .b[]]",
      "[(.a, .b[])]",
      "[.b | .[1], .[-1] | . + 10]",
      "[(.b | .[1], .[-1] | . + 10)]",
      ".a - -(.a, .b[])",
      "(.a, 10) + .b[]",
      "(.a, 10) - .b[:2][] - (4, 5)",
      "-(.a, .b[]) * .a",
      ".a / -(.a, .b[])",
      "(.a, 10) * .b[]",
      "(.a, 10) / .b[:2][] / (4, 5)",
      "(.a, -.a, 3) == .b[]",
      "(.a, -.a, 3) != .b[]",
      "(.a, -.a, 3) < .b[]",
      "(.a, -.a, 3) <= .b[]",
      "(.a, -.a, 3) > .b[]",
      "(.a, -.a, 3) >= .b[]",
      "{foo: .b}",
      "{foo: .b[]}",
      "{foo: [][]}",
      "{foo: (.a, .b[0])}",
      "{foo: (.a, .b)}",
      "{foo: (.a, .b[])}",
      "{foo: (.a, [][], .b[])}",
      "{(\"foo\", \"bar\"): .b[]}",
      "{(\"foo\", \"bar\", \"foo\"): .b[:2][]}",
      "{(\"foo\", \"bar\", \"baz\"): .b[:2][]}",
      "{(\"a\", \"b\"): .b[:2][], (\"c\", \"d\"): .b[2:][]}",
      "{(\"a\", \"b\"): .b[:2][], (\"c\", \"d\"): .b[2:][], (\"e\", \"f\"): -.b[:2][]}",
      ".a and .b[]",
      "(.a, true) and .b[0]",
      "(.a, false) and .b[0]",
      "(false, false) and .b[0]",
      "[][] and .b[0]",
      ".a and .b[] != 2",
      "(.a, true) and .b[] != 2",
      "(.a, false) and .b[] != 2",
      "(false, false) and .b[] != 2",
      "[][] and .b[] != 2",
      ".a and [][]",
      "(.a, true) and [][]",
      "(.a, false) and [][]",
      "(false, false) and [][]",
      "[][] and [][]",
      "(.a, true) and .b[] != 2 and .b[] != 5",
      ".a or .b[]",
      "(.a, true) or .b[0]",
      "(.a, false) or .b[0]",
      "(false, false) or .b[0]",
      "[][] or .b[0]",
      ".a or .b[] != 2",
      "(.a, true) or .b[] != 2",
      "(.a, false) or .b[] != 2",
      "(false, false) or .b[] != 2",
      "[][] or .b[] != 2",
      ".a or [][]",
      "(.a, true) or [][]",
      "(.a, false) or [][]",
      "(false, false) or [][]",
      "[][] or [][]",
      "(.a == 0, false) or .b[] == 2 or .b[] != 5"
    ],
    [
      { "a": -1, "b": [1, 2, 4, 5] }
    ]
  ],
  [
    "Parentheses",
    [
      "( .a)",
      "((.a))",
      "(.).a",
      "(.b)[]",
      "(.b)[0]",
      "(.b)[0:2]",
      "(.).a",
      "(-1 )",
      "(-5.5)",
      "(.4)",
      "(. | .)"
    ],
    [
      { "a": -1, "b": [1, 2, 4, 5] }
    ]
  ],
  [
    "Alternative",
    [
      ".[] // \"None\"",
      ".[], true // \"None\"",
      ".[] or false // \"None\"",
      ".[] and true // \"None\"",
      "(.[] | select(. == 25)) // \"None\"",
      "(.[] | select(. <= 25)) // \"None\"",
      "(.[] | select(. == -1)) // \"None\"",
      "(.[] | select(. == -1)) // (.[] | select(. == 25))",
      "(.[] | select(. == -1)) // (.[] | select(. <= 25))",
      "(.[] | select(. == -1)) // (.[] | select(. == -2))",
      "(.[] | select(. == -1)) // (.[] | select(. == 25)) // \"None\"",
      "(.[] | select(. == -1)) // (.[] | select(. <= 25)) // \"None\"",
      "(.[] | select(. == -1)) // (.[] | select(. == -2)) // \"None\"",
      ".[] | . // \"Bad\"",
      ".[] | select(. == 25) // \"Bad\"",
      ".[] | select(. <= 25) // \"Bad\"",
      ".[] | select(. == -1) // \"Bad\"",
      ".[] | select(. == -1) // select(. == 25)",
      ".[] | select(. == -1) // select(. <= 25)",
      ".[] | select(. == -1) // select(. == -2)",
      ".[] | select(. == -1) // select(. == 25) // \"Bad\"",
      ".[] | select(. == -1) // select(. <= 25) // \"Bad\"",
      ".[] | select(. == -1) // select(. == -2) // \"Bad\""
    ],
    [[
      true, null, false, 0, 25, "", "foo",
      [], ["foo"],
      {}, { "foo": "bar" }
    ]]
  ],
  [
    "Logical Or",
    [
      ".[0] or .[0]",
      ".[0] or .[1]",
      ".[1] or .[0]",
      ".[1] or .[1]",
      ".[1] or .[1] or .[0]",
      ".[] or .[]",
      "1, .[0] or .[1], 1",
      ".[1] or .[0] == 1",
      "1 == .[0] or .[1]",
      ".[0] != .[0] or .[1] != .[1]",
      ".[0] or .[0] and .[1] or .[1]"
    ],
    [[false, true, null, 0, 1]]
  ],
  [
    "Logical And",
    [
      ".[0] and .[0]",
      ".[0] and .[1]",
      ".[1] and .[0]",
      ".[1] and .[1]",
      ".[1] and .[1] and .[0]",
      ".[] and .[]",
      "1, .[1] and .[0], 1",
      ".[0] and .[1] != 1",
      "1 != .[1] and .[0]",
      ".[0] == .[0] and .[1] == .[1]",
      ".[0] and .[1] or .[1] and .[1]"
    ],
    [[false, true, null, 0, 1]]
  ],
  [
    "Comparison",
    [
      "{a: (.a[], .a), b: (.b[], .b)} | {r: (.a == .b), a: .a | tostring, b: .b | tostring}",
      "{a: (.a[], .a), b: (.b[], .b)} | {r: (.a != .b), a: .a | tostring, b: .b | tostring}",
      "{a: (.a[], .a), b: (.b[], .b)} | {r: (.a <  .b), a: .a | tostring, b: .b | tostring}",
      "{a: (.a[], .a), b: (.b[], .b)} | {r: (.a <= .b), a: .a | tostring, b: .b | tostring}",
      "{a: (.a[], .a), b: (.b[], .b)} | {r: (.a >  .b), a: .a | tostring, b: .b | tostring}",
      "{a: (.a[], .a), b: (.b[], .b)} | {r: (.a >= .b), a: .a | tostring, b: .b | tostring}"
    ],
    [{
      "a": [
        null, false, true,
        0, -0, 5, 30,
        "null", "false", "true", "12",
        "foo", "bar", "foobar", "Foo",
        [], [1, "foo"], [1, "bar", "foo"], ["bar", 1, "foo"],
        {}, { "foo": 1 }, { "foo": 1, "bar": 2 },
        { "foo": [true, "bar"], "baz": 3 }
      ],
      "b": [
        null, false, true,
        0, -0, 5, 30,
        "null", "false", "true", "12",
        "foo", "bar", "foobar", "Foo",
        [], [1, "foo"], [1, "bar", "foo"], ["bar", 1, "foo"],
        {}, { "foo": 1 }, { "foo": 1, "bar": 2 },
        { "foo": [true, "bar"], "baz": 3 }
      ]
    }]
  ],
  [
    "Addition (numbers)",
    [
      "1 + 1",
      ".a + [.b][0]",
      ".b + .a",
      "-3 + 4.1 + .a",
      "3 + (-3)",
      ".a + .x",
      ".x + .b",
      ".x + .y",
      ". + .x",
      ".x + [.b]"
    ],
    [
      { "a": -3, "b": 1.1 }
    ]
  ],
  [
    "Addition (strings)",
    [
      ".a + .b",
      ".a + \"+\" + .b",
      ".a + .x + .b",
      "(.a, .b) + (.b, .a)"
    ],
    [
      { "a": "3", "b": "0" },
      { "a": "foo", "b": "" },
      { "a": "", "b": "bar" },
      { "a": "", "b": "" },
      { "a": " ", "b": " " }
    ]
  ],
  [
    "Addition (arrays)",
    [
      ".a + .b",
      ".a + [0, \"+\", 0] + .b",
      ".a + .x + .b",
      "(.a, .b) + (.b, .a)"
    ],
    [
      { "a": [1, 2], "b": [3, 4] },
      { "a": [[1, 2]], "b": [3, 4] },
      { "a": [1, 2], "b": [[3, 4]] },
      { "a": [[1, 2]], "b": [[3, 4]] },
      { "a": [1, [2]], "b": [[3], 4] },
      { "a": [[1], 2], "b": [3, [4]] },
      { "a": [1, []], "b": [[], 4] },
      { "a": [[], 2], "b": [3, []] },
      { "a": [1, 2], "b": [] },
      { "a": [], "b": [3, 4] },
      { "a": [], "b": [] },
      { "a": [[]], "b": [[]] }
    ]
  ],
  [
    "Addition (objects)",
    [
      "{a: .[0], b: .[1]} | .a + .b",
      "{a: .[0], b: .[1]} | .a + .b + {a: -3}",
      "{a: .[0], b: .[1]} | .a + {c: \"+\"} + .b",
      "{a: .[0], b: .[1]} | .a + .x + .b",
      "{a: .[0], b: .[1]} | (.a, .b) + (.b, .a)"
    ],
    [
      [{ "a": 3 }, { "b": 0 }],
      [{ "a": 3 }, {}],
      [{}, { "b": 0 }],
      [{}, {}]
    ]
  ],
  [
    "Addition - errors",
    [
      "false + true",
      "false + .b",
      "false + \"b\"",
      "false + [.b]",
      "false + .",
      ".a + true",
      ".a + \"b\"",
      ".a + [.b]",
      ".a + .",
      "\"a\" + true",
      "\"a\" + .b",
      "\"a\" + [.b]",
      "\"a\" + .",
      "[.a] + true",
      "[.a] + .b",
      "[.a] + \"b\"",
      "[.a] + .",
      ". + true",
      ". + .b",
      ". + \"b\"",
      ". + [.b]"
    ],
    [
      { "a": 3, "b": 0 }
    ]
  ],
  [
    "Subtraction (numbers)",
    [
      ".a - .b",
      ".b - .a",
      "4- 3",
      "-3    -(4)",
      "14-.a -11"
    ],
    [
      { "a": 3, "b": 0 },
      { "a": -3, "b": 1.1 }
    ]
  ],
  [
    "Subtraction (numbers) - errors",
    [
      ".a - .x",
      ".x - .b",
      ".x - .y",
      ". - .x",
      ".x - [.b]",
      ".a - [.b]",
      ". - .b",
      ". - [.b]"
    ],
    [
      { "a": 3, "b": 0 }
    ]
  ],
  [
    "Multiplication (numbers)",
    [
      "1 * 1",
      ".a * [.b][0]",
      ".b * .a",
      "3 * 4.1 * .a",
      "3 * (-.3)"
    ],
    [
      { "a": -3, "b": 1.1 }
    ]
  ],
  [
    "Multiplication (strings)",
    [
      "\"\" * .b",
      ".b * \"\"",
      ".a * .b | length",
      ".b * .a | length",
      "1.9 * .a * .b | length",
      "1.9 * .b * .a | length"
    ],
    [
      { "a": "foo", "b": 0 },
      { "a": "foo", "b": 0.1 },
      { "a": "foo", "b": 1 },
      { "a": "foo", "b": 1.9 },
      { "a": "foo", "b": 2.1 },
      { "a": "foo", "b": 10 },
      { "a": "foo", "b": -0.1 },
      { "a": "foo", "b": -1 },
      { "a": "foo", "b": -10 }
    ]
  ],
  [
    "Multiplication - errors",
    [
      ".x * .y",
      ".x * true",
      ".x * .b",
      ".x * \"b\"",
      ".x * [.b]",
      ".x * .",
      "false * .x",
      "false * true",
      "false * .b",
      "false * \"b\"",
      "false * [.b]",
      "false * .",
      ".a * .x",
      ".a * true",
      ".a * [.b]",
      ".a * .",
      "\"a\" * .x",
      "\"a\" * true",
      "\"a\" * \"b\"",
      "\"a\" * [.b]",
      "\"a\" * .",
      "[.a] * .x",
      "[.a] * true",
      "[.a] * .b",
      "[.a] * \"b\"",
      "[.a] * [.b]",
      "[.a] * .",
      ". * .x",
      ". * true",
      ". * .b",
      ". * \"b\"",
      ". * [.b]"
    ],
    [
      { "a": 3, "b": 0 }
    ]
  ],
  [
    "Division (numbers)",
    [
      ".a / .b",
      ".b / .a",
      "4/ 3",
      "-3/(4)",
      "-1.1 + (3 * (((.4 - .b) / .a) + .b))",
      ".a / 15 / .b"
    ],
    [
      { "a": -3, "b": 1.1 }
    ]
  ],
  [
    "Division (strings) and split/1",
    [
      ".a / .b",
      ".b as $b | .a | split($b)"
    ],
    [
      { "a": "", "b": "" },
      { "a": "foo", "b": "" },
      { "a": "foo", "b": "f" },
      { "a": "foo", "b": "o" },
      { "a": "foo", "b": "foo" },
      { "a": "foo", "b": "foobar" },
      { "a": "foobar", "b": "foo" },
      { "a": "foobar", "b": "bar" },
      { "a": "foooooo", "b": "oo" },
      { "a": "foo bar baz", "b": " " },
      { "a": "foo.bar.baz", "b": "." },
      { "a": "foo  bar  baz", "b": " " },
      { "a": "foo, bar, baz", "b": ", " },
      { "a": " foo bar baz ", "b": " " }
    ]
  ],
  [
    "Division (strings with surrogate pairs) and split/1",
    [
      "\"𝟘𝟙𝟚𝟛\" / \"\"",
      "\"𝟘𝟙𝟚𝟛𝟘𝟙𝟚𝟛\" / \"𝟚\"",
      "\"𝟘𝟙𝟚𝟛\" | split(\"\")",
      "\"𝟘𝟙𝟚𝟛𝟘𝟙𝟚𝟛\" | split(\"𝟚\")"
    ],
    [
      1
    ]
  ],
  [
    "Division - errors",
    [
      ".x / .y",
      ".x / true",
      ".x / .b",
      ".x / \"b\"",
      ".x / [.b]",
      ".x / .",
      "false / .x",
      "false / true",
      "false / .b",
      "false / \"b\"",
      "false / [.b]",
      "false / .",
      ".a / .x",
      ".a / true",
      ".a / \"b\"",
      ".a / [.b]",
      ".a / .",
      "\"a\" / .x",
      "\"a\" / true",
      "\"a\" / .b",
      "\"a\" / [.b]",
      "\"a\" / .",
      "[.a] / .x",
      "[.a] / true",
      "[.a] / .b",
      "[.a] / \"b\"",
      "[.a] / [.b]",
      "[.a] / .",
      ". / .x",
      ". / true",
      ". / .b",
      ". / \"b\"",
      ". / [.b]",
      ". / ."
    ],
    [
      { "a": 3, "b": 0 }
    ]
  ],
  [
    "Modulo (numbers)",
    [
      "1 % 1",
      ".a % [.b][0]",
      ".b % .a",
      "3 % 4 % .a"
    ],
    [
      { "a": 3, "b": 1 },
      { "a": -3, "b": 1 }
    ]
  ],
  [
    "Modulo (numbers) - errors",
    [
      ".a % .x",
      ".x % .b",
      ".x % .y",
      ". % .x",
      ".x % [.b]",
      ".a % [.b]",
      ". % .b",
      ". % [.b]"
    ],
    [
      { "a": 3, "b": 1 }
    ]
  ],
  [
    "Try-catch",
    [
      "try -.",
      "try -. catch empty",
      "try -. catch (. | rtrimstr(\".\"))",
      "try -. catch (. | rtrimstr(\".\") + (\" 1\", \" 2\"))",
      "try -. catch 2 + 3",
      "try try -.",
      "try try -. catch (. | rtrimstr(\".\"))",
      "try try -. catch .b",
      "try try -. catch .b catch (. | rtrimstr(\".\"))",
      "try -. catch try (. | rtrimstr(\".\"))",
      "try -. catch try .b",
      "try -. catch try .b catch (. | rtrimstr(\".\"))",
      "try . as $x | -$x",
      "try . as $x | -$x catch (. | rtrimstr(\".\"))",
      "try -. catch . as $x | $x | rtrimstr(\".\") + \"!\"",
      "try if -. then . else .b end catch (. | rtrimstr(\".\"))",
      "try -if . then . else .b end catch (. | rtrimstr(\".\"))",
      "try -. catch .b?",
      "try .b? catch .c"
    ],
    [
      1,
      "a"
    ]
  ],
  [
    "Try-catch - errors",
    [
      "try -. catch .b",
      "try try -. catch .b catch .c",
      "try -. catch try .b catch .c"
    ],
    [
      "a"
    ]
  ],
  [
    "Variables",
    [
      "1 as $x | $x",
      "1 as $x | .",
      ". as $x | $x",
      ". as $x | 1",
      ".x as $x | $x",
      ".x as $x | .x",
      ".as as $x | $x",
      ".[] as $x | $x",
      ".[] as $x | .as",
      "empty as $x | $x",
      "empty as $x | 1",
      ".x as $x | $x as $y | $x",
      ".x as $x | $x as $y | $y",
      ".x as $x | .as as $y | $y",
      ".x as $x | .as as $y | . as $x | $x",
      ".x as $x | .as as $y | $y as $x | $x",
      ".[] as $x | .[] as $y | $y",
      ".[] as $x | empty as $y | 1",
      "empty as $x | .[] as $y | 1",
      ".x as $x | .as as $y | $x | $y",
      ".x as $x | .as as $y | $x, $y",
      ".z as $x | .as as $y | $x // $y",
      ".z as $x | .as as $y | $x // $y // 1",
      ".z as $x | .as as $y | $x or $y",
      ".x as $x | .as as $y | $x and $y",
      ".x as $x | .as as $y | $x == $y",
      ".x as $x | .as as $y | $x != $y",
      ".x as $x | .as as $y | $x <  $y",
      ".x as $x | .as as $y | $x <= $y",
      ".x as $x | .as as $y | $x >  $y",
      ".x as $x | .as as $y | $x >= $y",
      ".x as $x | .as as $y | $x + $y",
      ".x as $x | .as as $y | $x - $y",
      ".x as $x | .as as $y | $x * $y",
      ".x as $x | .as as $y | $x / $y",
      ".x as $x | .as as $y | $x % $y",
      ".x as $x | .as as $y | -$x + $y",
      "-.x as $x | .as as $y | $x + $y",
      ".x as $x | .as as $y | if $x then $y else 1 end",
      ".z as $x | .as as $y | if $x then 1 else $y end",
      ".x as $x | .as as $y | [$x, $y]",
      ".as as $x | .x as $y | {x: $x, y: $y}",
      ".as as $x | .x as $y | {$x, $y}",
      ".as as $x | {$x, x}",
      "\"as\" as $x | {($x): .x}",
      "\"as\" as $x | .[$x]",
      "1 as $x | [10, 20, 30, 40] as $y | $y[$x]",
      "1 as $x | [10, 20, 30, 40] as $y | $y[$x:]",
      "1 as $x | [10, 20, 30, 40] as $y | $y[:$x]",
      "1 as $x | [10, 20, 30, 40] | 2 as $y | .[$x:$y]",
      "[\"foo\", \"bar\"] | \"+\" as $x | join($x)",
      "[10, 20, 30, 40] | 1 as $x | map(. + $x)",
      "[10, 20, 30, 40] | 1 as $x | sort_by(. + $x)"
    ],
    [
      { "x": 10, "as": 100 }
    ]
  ],
  [
    "Generalized optional",
    [
      "., (.a + .b + .c)?, .[]",
      "., (.a + .b + .c) ?, .[]",
      "., (.a + .b + .c)??, .[]",
      "., (.a + .b + .c)? ?, .[]",
      "., (.a + .b + .c) ??, .[]",
      "., (.a + .b + .c)???, .[]",
      "., (.[] | tonumber?), .[]",
      "., (.[] as $x | $x | tonumber?), .[]",
      "., if .a.foo then .b else .c end?, .[]",
      "., if .a then .b.foo else .c end?, .[]",
      "., if .x then .b else .c.foo end?, .[]",
      "., .a.foo??, .[]"
    ],
    [
      { "a": "1", "b": [2], "c": "3" }
    ]
  ],
  [
    "If-then-else",
    [
      "if .t then .a else .b end",
      "if .f then .a else .b end",
      "if .t then .a elif .t then .a * 2 else .b end",
      "if .f then .a elif .t then .a * 2 else .b end",
      "if .t then .a elif .f then .a * 2 else .b end",
      "if .f then .a elif .f then .a * 2 else .b end",
      "if .t then if .t then .a * 2 else .b * 2 end else .b end",
      "if .f then if .t then .a * 2 else .b * 2 end else .b end",
      "if .t then if .f then .a * 2 else .b * 2 end else .b end",
      "if .f then if .f then .a * 2 else .b * 2 end else .b end",
      "if .t then .a else if .t then .a * 2 else .b * 2 end end",
      "if .f then .a else if .t then .a * 2 else .b * 2 end end",
      "if .t then .a else if .f then .a * 2 else .b * 2 end end",
      "if .f then .a else if .f then .a * 2 else .b * 2 end end",
      "if .a < .b or .t then .f | not else .b end",
      "if .a < .b or .f then .a else .t | not end",
      "if if .a < .b then .t else .f end then .a else .b end",
      "if if .a < .b then .f else .t end then .a else .b end",
      " -if .t then .a else .b end",
      " -if .f then .a else .b end",
      "if .t then -if .t then .a * 2 else .b * 2 end else .b end",
      "if .f then .a else -if .t then .a * 2 else .b * 2 end end",
      "if .t then .a, .a + 1 else .b, .b + 1 end",
      "if .f then .a, .a + 1 else .b, .b + 1 end",
      "if .t, .t then .a, .a + 1 else .b, .b + 1 end",
      "if .f, .t then .a, .a + 1 else .b, .b + 1 end",
      "if .t, .f then .a, .a + 1 else .b, .b + 1 end",
      "if .f, .f then .a, .a + 1 else .b, .b + 1 end",
      "if .t, .t then .a elif .t, .f then .a * 2 else .b end",
      "if .f, .t then .a elif .f, .t then .a * 2 else .b end",
      "if .t, .f then .a elif .t, .f then .a * 2 else .b end",
      "if .f, .f then .a elif .f, .t then .a * 2 else .b end"
    ],
    [
      { "f": false, "t": true, "a": 10, "b": -10 },
      { "f": null, "t": 0, "a": 10, "b": -10 }
    ]
  ],
  [
    "Array Construction",
    [
      "[]",
      "[ ]",
      "[4]",
      "[ -6, [0]]",
      "[7 | 4]",
      "[.]",
      "[. | [6]]",
      "[5, 6 ] | ."
    ],
    [
      [
        1
      ],
      {
        "a": "a"
      }
    ]
  ],
  [
    "Object Construction",
    [
      "{}",
      "{  }",
      "{\"\": 6}",
      "{\" \": 6}",
      "{\"foo\": 6}",
      "{ \"foo\": 6 }",
      "{\"foo\" : 6 }",
      "{\"foo\": 6,}",
      "{\"foo\": 6 ,}",
      "{\"foo\": 6, \"bar\": [5, 3]}",
      "{\"foo\": 6, \"bar\": [5, 3], }",
      "{\"x\": 3} | {\"y\": .x}",
      "{foo: \"bar\"}",
      "{ foo: \"bar\"}",
      "{foo : \"bar\"}",
      "{foo: \"bar\", foo: \"baz\"}",
      "{and: \"bar\"}",
      "{or: \"bar\"}",
      "{if: \"bar\"}",
      "{(.a): true}",
      "{({\"a\": \"b\"} | .a): true}",
      "{\"a\": 4, \"b\": 3, \"c\": -1, \"d\": \"f\"}",
      "{a}",
      "{a, b}",
      "{a: 6, b}",
      "{a, b: 6}",
      "{a, b: 6, c}",
      "{a: 6, b, c: 3}",
      "{\"a\"}",
      "{\"a\", b}",
      "{a, \"b\"}",
      "{a: 6, \"b\"}",
      "{\"a\", \"b\"}"
    ],
    [
      { "a": "b", "b": 3 }
    ]
  ],
  [
    "Object Construction - errors",
    [
      "{(.): 6}"
    ],
    [
      null, false, true, 0, 1, -1, 25,
      [], ["foo"],
      {}, { "foo": "bar" }
    ]
  ],
  [
    "Integer literal",
    [
      "3",
      "  6",
      "-4",
      "0",
      "- 7",
      "011",
      "091"
    ],
    [
      1
    ]
  ],
  [
    "Float literal",
    [
      ".3",
      "3.",
      "6.0",
      "-4.001",
      "3.14",
      "0.1"
    ],
    [
      1
    ]
  ],
  [
    "Boolean literal, null, empty",
    [
      "true",
      "false",
      "null",
      "empty",
      "empty[]",
      "[empty]",
      "[empty][]"
    ],
    [
      1
    ]
  ],
  [
    "Boolean literal, null, empty - errors",
    [
      ".true",
      ".false",
      ".null",
      ".empty"
    ],
    [
      1
    ]
  ],
  [
    "String literal",
    [
      "\"\"",
      "\" \"",
      "\"1\"",
      "\"[]\"",
      "\"{}\"",
      "\"foo'bar\"",
      "\"foo/bar\"",
      "\"foo\\\"bar\"",
      "\"foo\\\\bar\"",
      "\"foo\\/bar\"",
      "\"foo\\bbar\"",
      "\"foo\\fbar\"",
      "\"foo\\nbar\"",
      "\"foo\\rbar\"",
      "\"foo\\tbar\"",
      "\"\\\"\\/\\b\\f\\n\\r\\t\\\\\""
    ],
    [
      1
    ]
  ],
  [
    "ascii_downcase, ascii_upcase",
    [
      ".greeting | ascii_downcase",
      ".greeting | ascii_upcase"
    ],
    [{ "greeting": "Hello, МИР! © 2020\nПривет, WORLD!" }]
  ],
  [
    "ascii_downcase, ascii_upcase - errors",
    [
      "ascii_downcase",
      "ascii_upcase"
    ],
    [1, null]
  ],
  [
    "capture",
    [
      "capture(\"\")",
      "capture(\"\"; \"g\", \"n\", \"gn\")",
      "capture(\"()\")",
      "capture(\"()\"; \"g\", \"n\", \"gn\")",
      "capture(\"(a*)\")",
      "capture(\"(a*)\"; \"g\", \"n\", \"gn\")",
      "capture(\"(a)*\")",
      "capture(\"(a)*\"; \"g\", \"n\", \"gn\")",
      "capture(\"(?<c>)\")",
      "capture(\"(?<c>)\"; \"g\", \"n\", \"gn\")",
      "capture(\"(?<c>a*)\")",
      "capture(\"(?<c>a*)\"; \"g\", \"n\", \"gn\")",
      "capture(\"(?<c>a)*\")",
      "capture(\"(?<c>a)*\"; \"g\", \"n\", \"gn\")",
      "capture(\"(b)\")",
      "capture(\"(b)\"; null)",
      "capture(\"(b)\"; \"\")",
      "capture(\"(b)\"; \"g\")",
      "capture([\"(b)\", null])",
      "capture([\"(b)\", \"\"])",
      "capture([\"(b)\", \"g\"])",
      "capture(\"(?<c>b)\")",
      "capture(\"(?<c>b)\"; null)",
      "capture(\"(?<c>b)\"; \"\")",
      "capture(\"(?<c>b)\"; \"g\")",
      "capture([\"(?<c>b)\", null])",
      "capture([\"(?<c>b)\", \"\"])",
      "capture([\"(?<c>b)\", \"g\"])",
      "capture(\"b\")",
      "capture(\"b()\")",
      "capture(\"b(a*)\")",
      "capture(\"b(a)*\")",
      "capture(\"b(?<c>)\")",
      "capture(\"b(?<c>a*)\")",
      "capture(\"b(?<c>a)*\")",
      "capture(\"a(?<c>b)\", [\"a(?<c>b)\", \"g\"])",
      "capture(\".(?<c>b)\"; \"g\", \"gm\")",
      "capture(\"(?<c>aB?)\", \"(?<c>bB?)\"; \"gg\", \"gi\")",
      ". + \"𝟘𝟙𝟚𝟛\" | capture(\".(?<c>.)\"; \"g\")"
    ],
    [
      "",
      "ababb\nbaabb"
    ]
  ],
  [
    "capture - errors",
    [
      "capture(null)",
      "capture(1)",
      "capture([])",
      "capture([null])",
      "capture([1])",
      "capture([\"b\", 1])",
      "capture([\"b\", \"z\"])",
      "capture(\"b\"; 1)",
      "capture(\"b\"; \"z\")",
      "capture(\"b(\")",
      "null | capture(\"b\")",
      "   1 | capture(\"b\")"
    ],
    [
      "ababb\nbaabb"
    ]
  ],
  [
    "from_entries",
    [
      "from_entries"
    ],
    [
      [],
      [{ "key": "", "value": 1 }],
      [{ "key": "a", "value": 1 }],
      [{ "key": "a", "value": 1 }, { "key": "b", "value": 2 }],
      [{ "key": "a", "value": 1 }, { "key": "b", "value": null }],
      [{ "key": "a", "value": 1 }, { "key": "b", "value": 2 }, { "key": "a", "value": 3 }],
      [{ "key": "a", "value": 1, "hasOwnProperty": "foo" }],
      [{ "Key": "a", "value": 1 }],
      [{ "name": "a", "value": 1 }],
      [{ "Name": "a", "value": 1 }],
      [{ "key": null, "Key": "a", "value": 1 }],
      [{ "key": false, "Key": "a", "value": 1 }],
      [{ "key": false, "Key": "a", "name": "b", "value": 1 }],
      [{ "key": false, "Key": "a", "Name": "b", "value": 1 }],
      [{ "key": false, "name": "a", "Name": "b", "value": 1 }],
      [{ "Key": null, "name": "a", "value": 1 }],
      [{ "Key": false, "name": "a", "value": 1 }],
      [{ "name": null, "Name": "a", "value": 1 }],
      [{ "name": false, "Name": "a", "value": 1 }],
      [{ "key": "a" }],
      [{ "key": "a", "Value": 2 }],
      [{ "key": "a", "Value": 2, "value": 1 }],
      {},
      { "x": { "key": "a", "value": 1 } },
      { "x": { "key": "a", "value": 1 }, "y": { "key": "b", "value": 2 }, "z": { "key": "a", "value": 3 } }
    ]
  ],
  [
    "from_entries - errors",
    [
      "from_entries"
    ],
    [
      null, false, 3, "key",
      [null], [false], [3], ["key"],
      [{ "value": 1 }],
      [{ "key": 1, "value": 1 }],
      [{ "key": null, "value": 1 }],
      [{ "key": false, "value": 1 }],
      [{ "Key": false, "value": 1 }],
      [{ "name": false, "value": 1 }],
      [{ "Name": false, "value": 1 }],
      { "x": { "value": 1 } },
      { "x": { "key": 1, "value": 1 } }
    ]
  ],
  [
    "gsub",
    [
      "gsub(\"\"; null; \"n\", \"gn\")",
      "gsub(\"\"; \"x\"; \"n\", \"gn\")",
      "gsub(\"x\"; 1)",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; null)",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; null; \"gg\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; null; \"gg\", \"gi\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; \"x\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; \"x\"; \"gg\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; \"x\"; \"gg\", \"gi\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; .c, .d, .e)",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; .c, .d, .e; \"gg\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; .c, .d, .e; \"gg\", \"gi\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; null)",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; null; \"gg\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; null; \"gg\", \"gimi\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; \"x\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; \"x\"; \"gg\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; \"x\"; \"gg\", \"gimi\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; .c, .d, .e)",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; .c, .d, .e; \"gg\")",
      "gsub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; .c, .d, .e; \"gg\", \"gimi\")",
      ". + \"𝟘𝟙𝟚𝟛\" | gsub(\".(?<c>.)\"; \"(\" + .c + \")\"; \"g\")"
    ],
    [
      "",
      "ababb\nbaabb"
    ]
  ],
  [
    "gsub - errors",
    [
      "gsub(null; \"x\")",
      "gsub(1; \"x\")",
      "gsub(\"b\"; \"x\"; \"z\")",
      "gsub(\"b(\"; \"x\")",
      "null | gsub(\"b\"; \"x\")",
      "   1 | gsub(\"b\"; \"x\")"
    ],
    [
      "ababb\nbaabb"
    ]
  ],
  [
    "infinite",
    [
      ". * infinite | isnan",
      ". * infinite | isfinite",
      ". * infinite | isinfinite",
      ". * infinite | isnormal",
      ". * infinite == nan",
      ". * infinite != nan",
      ". * infinite == infinite",
      ". * infinite != infinite",
      ". * infinite < true",
      ". * infinite > true",
      ". * infinite < \"\"",
      ". * infinite > \"\"",
      ". * infinite < 0",
      ". * infinite > 0",
      ". * infinite < nan",
      ". * infinite > nan",
      ". * infinite < infinite",
      ". * infinite > infinite",
      ". * infinite + nan | isnan",
      ". * infinite + 1 == . * infinite",
      ". * infinite + . * infinite == . * infinite",
      ". * infinite - . * infinite | isnan",
      ". * infinite * infinite == . * infinite",
      ". * infinite / infinite | isnan",
      "0 * . * infinite | isnan",
      "0 / . * infinite | 0",
      "1 / . * infinite | 0",
      "[. * infinite] | tostring",
      "{a: (. * infinite)} | tostring"
    ],
    [
      1, -1
    ]
  ],
  [
    "isfinite, isinfinite, isnan, isnormal",
    [
      "isfinite",
      "isinfinite",
      "isnan",
      "isnormal"
    ],
    [
      null, false, 0, 3, "foo", [], {}
    ]
  ],
  [
    "join",
    [
      "join(empty)",
      "join(null)",
      "join(\"\")",
      "join(\" \")",
      "join(\"+\")",
      "join(\"+\", \"-\")"
    ],
    [
      [],
      ["foo"],
      ["foo", "bar"],
      ["foo", "bar", "baz"],
      ["foo", "", "bar"],
      ["foo", null, "bar"],
      ["foo", true, "bar"],
      ["foo", 3.14, "bar"],
      [null, "", "foo"],
      ["", null, "foo"],
      [-3, false, null],
      {},
      { "a": "foo" },
      { "a": "foo", "b": "bar" }
    ]
  ],
  [
    "join - errors",
    [
      "join(\"+\")"
    ],
    [
      null, false, 0, 3, "foo",
      [[]],
      [{}],
      ["foo", []],
      ["foo", {}],
      { "a": [] },
      { "a": {} },
      { "a": "foo", "b": [] },
      { "a": "foo", "b": {} }
    ]
  ],
  [
    "join (empty separator)",
    [
      "join(empty)"
    ],
    [
      null, false, 0, 3, "foo",
      [[]],
      [{}],
      ["foo", []],
      ["foo", {}],
      { "a": [] },
      { "a": {} },
      { "a": "foo", "b": [] },
      { "a": "foo", "b": {} }
    ]
  ],
  [
    "join (invalid separator)",
    [
      "join(false)",
      "join(0)",
      "join([])",
      "join({})"
    ],
    [
      ["foo"],
      { "a": "foo" }
    ]
  ],
  [
    "join (invalid separator) - errors",
    [
      "join(false)",
      "join(0)",
      "join([])",
      "join({})"
    ],
    [
      ["foo", "bar"],
      { "a": "foo", "b": "bar" }
    ]
  ],
  [
    "keys, keys_unsorted, to_entries",
    [
      "keys",
      "keys_unsorted",
      "to_entries"
    ],
    [
      {},
      { "b": null },
      { "b": null, "a": 3 },
      [],
      [null],
      [null, 3]
    ]
  ],
  [
    "keys, keys_unsorted, to_entries - errors",
    [
      "keys",
      "keys_unsorted",
      "to_entries"
    ],
    [
      null, false, 3, "foo"
    ]
  ],
  [
    "length",
    [
      "length"
    ],
    [
      null, 0, -0, 1, -1, 25, -25, "", "foo",
      [], [0], [1, 2],
      {}, { "a": 0 }, { "a": 0, "b": 1 }, { "length": 25 }
    ]
  ],
  [
    "length - errors",
    [
      "length"
    ],
    [
      false, true
    ]
  ],
  [
    "ltrimstr, rtrimstr",
    [
      ".b as $b | .a[] | ltrimstr($b[])",
      ".b as $b | .a[] | rtrimstr($b[])"
    ],
    [
      { "a": [""], "b": [] },
      { "a": [""], "b": [""] },
      { "a": ["foobar"], "b": [] },
      { "a": ["foobar"], "b": [""] },
      { "a": ["foo"], "b": ["bar"] },
      { "a": [""], "b": ["foobar"] },
      { "a": ["foofoobarbar"], "b": ["foo"] },
      { "a": ["foofoobarbar"], "b": ["bar"] },
      { "a": ["foo"], "b": ["foobar"] },
      { "a": ["bar"], "b": ["foobar"] },
      { "a": ["foobar"], "b": ["foo", "bar"] },
      { "a": ["foo", "bar"], "b": ["foo", "bar"] },
      { "a": ["foo", null, false, 1, [], {}, "bar"], "b": ["f", "o", null, false, 1, [], {}, "b", "r"] }
    ]
  ],
  [
    "map, map_values",
    [
      "map(.)",
      "map(. + 10)",
      "map(. + 10, . + 20)",
      "map(. + 10) | map(. + 100)",
      "map(empty)",
      "map(select(. < 2))",
      "map(select(. < 2, . < 3))",
      "map_values(.)",
      "map_values(. + 10)",
      "map_values(. + 10, . + 20)",
      "map_values(. + 10) | map_values(. + 100)"
    ],
    [
      [1, 2, 3, 0],
      { "a": 1, "b": 2, "c": 3, "d": 0 }
    ]
  ],
  [
    "map, map_values - errors",
    [
      "map(.)",
      "map_values(.)"
    ],
    [
      null, true, 1, "foo"
    ]
  ],
  [
    "match",
    [
      "match(\"\")",
      "match(\"\"; \"g\", \"n\", \"gn\")",
      "match(\"()\")",
      "match(\"()\"; \"g\", \"n\", \"gn\")",
      "match(\"(a*)\")",
      "match(\"(a*)\"; \"g\", \"n\", \"gn\")",
      "match(\"(a)*\")",
      "match(\"(a)*\"; \"g\", \"n\", \"gn\")",
      "match(\"(?<c>)\")",
      "match(\"(?<c>)\"; \"g\", \"n\", \"gn\")",
      "match(\"(?<c>a*)\")",
      "match(\"(?<c>a*)\"; \"g\", \"n\", \"gn\")",
      "match(\"(?<c>a)*\")",
      "match(\"(?<c>a)*\"; \"g\", \"n\", \"gn\")",
      "match(\"(b)\")",
      "match(\"(b)\"; null)",
      "match(\"(b)\"; \"\")",
      "match(\"(b)\"; \"g\")",
      "match([\"(b)\", null])",
      "match([\"(b)\", \"\"])",
      "match([\"(b)\", \"g\"])",
      "match(\"(?<c>b)\")",
      "match(\"(?<c>b)\"; null)",
      "match(\"(?<c>b)\"; \"\")",
      "match(\"(?<c>b)\"; \"g\")",
      "match([\"(?<c>b)\", null])",
      "match([\"(?<c>b)\", \"\"])",
      "match([\"(?<c>b)\", \"g\"])",
      "match(\"b\")",
      "match(\"b()\")",
      "match(\"b(a*)\")",
      "match(\"b(a)*\")",
      "match(\"b(?<c>)\")",
      "match(\"b(?<c>a*)\")",
      "match(\"b(?<c>a)*\")",
      "match(\"a(?<c>b)\", [\"a(?<c>b)\", \"g\"])",
      "match(\".(?<c>b)\"; \"g\", \"gm\")",
      "match(\"(?<c>aB?)\", \"(?<c>bB?)\"; \"gg\", \"gi\")"
    ],
    [
      "",
      "ababb\nbaabb"
    ]
  ],
  [
    "match - errors",
    [
      "match(null)",
      "match(1)",
      "match([])",
      "match([null])",
      "match([1])",
      "match([\"b\", 1])",
      "match([\"b\", \"z\"])",
      "match(\"b\"; 1)",
      "match(\"b\"; \"z\")",
      "match(\"b(\")",
      "null | match(\"b\")",
      "   1 | match(\"b\")"
    ],
    [
      "ababb\nbaabb"
    ]
  ],
  [
    "nan",
    [
      "nan | isnan",
      "nan | isfinite",
      "nan | isinfinite",
      "nan | isnormal",
      "nan == nan",
      "nan != nan",
      "nan < true",
      "nan > true",
      "nan < \"\"",
      "nan > \"\"",
      "nan < 0",
      "nan > 0",
      "0 < nan",
      "0 > nan",
      "nan + nan | isnan",
      "nan + 1 | isnan",
      "[nan] | tostring",
      "{a: nan} | tostring"
    ],
    [
      1
    ]
  ],
  [
    "not",
    [
      ".[] | not",
      ".[] | not | not",
      ".[] | select(not)"
    ],
    [
      [null, false, true, 0, -0, 1, -1, 25],
      ["", "null", "false", "true", "0", "1", "foo"],
      [[], [false], [0], [""], [{}]],
      [
        {},
        { "a": false },
        { "a": 0 },
        { "a": "" },
        { "a": [] },
        { "a": {} },
        { "false": false }
      ]
    ]
  ],
  [
    "reverse",
    [
      "reverse"
    ],
    [
      [],
      [1, 2, 3, 4],
      [3, 1, 2],
      [3, "foo", null, { "a": 1 }, false, ["bar", -3.14]],
      [[3, 1, 2]],
      null,
      0,
      -0,
      "",
      {}
    ]
  ],
  [
    "reverse - errors",
    [
      "reverse"
    ],
    [
      false, 3, -3, 0.1, -0.1, "foo", { "a": 1 }
    ]
  ],
  [
    "scan",
    [
      "scan(\"\")",
      "scan(\"()\")",
      "scan(\"(a*)\")",
      "scan(\"(a)*\")",
      "scan(\"(?<c>)\")",
      "scan(\"(?<c>a*)\")",
      "scan(\"(?<c>a)*\")",
      "scan(\"(b)\")",
      "scan(\"(?<c>b)\")",
      "scan(\"b\")",
      "scan(\"b()\")",
      "scan(\"b(a*)\")",
      "scan(\"b(a)*\")",
      "scan(\"b(?<c>)\")",
      "scan(\"b(?<c>a*)\")",
      "scan(\"b(?<c>a)*\")",
      "scan(\"a(?<c>b)\")",
      "scan(\".(?<c>b)\")",
      "scan(\"(?<c>aB?)\", \"(?<c>bB?)\")",
      ". + \"𝟘𝟙𝟚𝟛\" | scan(\".(?<c>.)\")"
    ],
    [
      "",
      "ababb\nbaabb"
    ]
  ],
  [
    "scan - errors",
    [
      "scan(null)",
      "scan(1)",
      "scan([])",
      "scan([null])",
      "scan([1])",
      "scan([\"b\", 1])",
      "scan([\"b\", \"z\"])",
      "scan(\"b(\")",
      "null | scan(\"b\")",
      "   1 | scan(\"b\")"
    ],
    [
      "ababb\nbaabb"
    ]
  ],
  [
    "select",
    [
      "select(.)",
      "select(. > 2)",
      ".[] | select(.)",
      ".[] | select(. > 2)",
      ".[] | select(. < 2)",
      ".[] | select(. < 0)",
      ".[] | select(. < 2, . > 2)",
      ".[] | select(. < 2, . > 0)",
      ".[] | select(. == false)",
      ".[] | select(. == true)",
      ".[] | select([.][])"
    ],
    [[1, 2, 3, 0, false, "false", null, "null", "", [], {}]]
  ],
  [
    "sort",
    [
      "sort",
      "[.[] | [5, .], .] | sort",
      "[.[] | [5, .], {\"b\": ., \"a\": [5, .]}, .] | sort"
    ],
    [[10, 5, {}, null, [], "false", [5, 10]]]
  ],
  [
    "sort - errors",
    [
      "sort"
    ],
    [10, {}, null, "false"]
  ],
  [
    "sort_by",
    [
      "sort_by(.)",
      "sort_by(-.)",
      "sort_by(. % 3)",
      "sort_by(empty)",
      "sort_by({\"z\": 1}, .)",
      "sort_by({\"z\": 1}, select(. != 2))",
      "sort_by({\"z\": 1}, select(. != 2), {\"z\": 1})",
      "sort_by(select(. < 5), select(. < 10))"
    ],
    [[10, 5, 1, 2]]
  ],
  [
    "split/2",
    [
      "split(\"\"; null)",
      "split(\"\"; \"g\", \"n\", \"gn\")",
      "split(\"()\"; null)",
      "split(\"()\"; \"g\", \"n\", \"gn\")",
      "split(\"(a*)\"; null)",
      "split(\"(a*)\"; \"g\", \"n\", \"gn\")",
      "split(\"(a)*\"; null)",
      "split(\"(a)*\"; \"g\", \"n\", \"gn\")",
      "split(\"(?<c>)\"; null)",
      "split(\"(?<c>)\"; \"g\", \"n\", \"gn\")",
      "split(\"(?<c>a*)\"; null)",
      "split(\"(?<c>a*)\"; \"g\", \"n\", \"gn\")",
      "split(\"(?<c>a)*\"; null)",
      "split(\"(?<c>a)*\"; \"g\", \"n\", \"gn\")",
      "split(\"(b)\"; null)",
      "split(\"(b)\"; \"\")",
      "split(\"(b)\"; \"g\")",
      "split(\"(?<c>b)\"; null)",
      "split(\"(?<c>b)\"; \"\")",
      "split(\"(?<c>b)\"; \"g\")",
      "split(\"b\"; null)",
      "split(\"b()\"; null)",
      "split(\"b(a*)\"; null)",
      "split(\"b(a)*\"; null)",
      "split(\"b(?<c>)\"; null)",
      "split(\"b(?<c>a*)\"; null)",
      "split(\"b(?<c>a)*\"; null)",
      "split(\"a(?<c>b)\"; null, \"g\")",
      "split(\".(?<c>b)\"; \"g\", \"gm\")",
      "split(\"(?<c>aB?)\", \"(?<c>bB?)\"; \"gg\", \"gi\")",
      ". + \"𝟘𝟙𝟚𝟛\" | split(\".(?<c>.)\"; \"g\")"
    ],
    [
      "",
      "ababb\nbaabb"
    ]
  ],
  [
    "split/2 - errors",
    [
      "split(null; null)",
      "split(1; null)",
      "split([]; null)",
      "split([null]; null)",
      "split([1]; null)",
      "split([\"b\", 1]; null)",
      "split([\"b\", \"z\"]; null)",
      "split(\"b(\"; null)",
      "null | split(\"b\"; null)",
      "   1 | split(\"b\"; null)"
    ],
    [
      "ababb\nbaabb"
    ]
  ],
  [
    "splits",
    [
      "splits(\"\")",
      "splits(\"\"; \"g\", \"n\", \"gn\")",
      "splits(\"()\")",
      "splits(\"()\"; \"g\", \"n\", \"gn\")",
      "splits(\"(a*)\")",
      "splits(\"(a*)\"; \"g\", \"n\", \"gn\")",
      "splits(\"(a)*\")",
      "splits(\"(a)*\"; \"g\", \"n\", \"gn\")",
      "splits(\"(?<c>)\")",
      "splits(\"(?<c>)\"; \"g\", \"n\", \"gn\")",
      "splits(\"(?<c>a*)\")",
      "splits(\"(?<c>a*)\"; \"g\", \"n\", \"gn\")",
      "splits(\"(?<c>a)*\")",
      "splits(\"(?<c>a)*\"; \"g\", \"n\", \"gn\")",
      "splits(\"(b)\")",
      "splits(\"(b)\"; null)",
      "splits(\"(b)\"; \"\")",
      "splits(\"(b)\"; \"g\")",
      "splits(\"(?<c>b)\")",
      "splits(\"(?<c>b)\"; null)",
      "splits(\"(?<c>b)\"; \"\")",
      "splits(\"(?<c>b)\"; \"g\")",
      "splits(\"b\")",
      "splits(\"b()\")",
      "splits(\"b(a*)\")",
      "splits(\"b(a)*\")",
      "splits(\"b(?<c>)\")",
      "splits(\"b(?<c>a*)\")",
      "splits(\"b(?<c>a)*\")",
      "splits(\"a(?<c>b)\"; null, \"g\")",
      "splits(\".(?<c>b)\"; \"g\", \"gm\")",
      "splits(\"(?<c>aB?)\", \"(?<c>bB?)\"; \"gg\", \"gi\")",
      ". + \"𝟘𝟙𝟚𝟛\" | splits(\".(?<c>.)\"; \"g\")"
    ],
    [
      "",
      "ababb\nbaabb"
    ]
  ],
  [
    "splits - errors",
    [
      "splits(null)",
      "splits(1)",
      "splits([])",
      "splits([null])",
      "splits([1])",
      "splits([\"b\", 1])",
      "splits([\"b\", \"z\"])",
      "splits(\"b(\")",
      "null | splits(\"b\")",
      "   1 | splits(\"b\")"
    ],
    [
      "ababb\nbaabb"
    ]
  ],
  [
    "sub",
    [
      "sub(\"\"; null)",
      "sub(\"\"; null; \"n\", \"gn\")",
      "sub(\"\"; \"x\")",
      "sub(\"\"; \"x\"; \"n\", \"gn\")",
      "sub(\"x\"; 1)",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; null)",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; null; \"gg\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; null; \"gg\", \"gi\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; \"x\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; \"x\"; \"gg\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; \"x\"; \"gg\", \"gi\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; .c, .d, .e)",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; .c, .d, .e; \"gg\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\"; .c, .d, .e; \"gg\", \"gi\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; null)",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; null; \"gg\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; null; \"gg\", \"gimi\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; \"x\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; \"x\"; \"gg\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; \"x\"; \"gg\", \"gimi\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; .c, .d, .e)",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; .c, .d, .e; \"gg\")",
      "sub(\"(?<c>a)(?<d>b?)(?<e>B)?\", \".(?<c>b)(?<d>a)(?<e>A)?\"; .c, .d, .e; \"gg\", \"gimi\")",
      ". + \"𝟘𝟙𝟚𝟛\" | sub(\".(?<c>.)\"; \"(\" + .c + \")\"; \"g\")"
    ],
    [
      "",
      "ababb\nbaabb"
    ]
  ],
  [
    "sub - errors",
    [
      "sub(null; \"x\"; null)",
      "sub(1; \"x\"; null)",
      "sub(\"b\"; \"x\"; \"z\")",
      "sub(\"b(\"; \"x\")",
      "null | sub(\"b\"; \"x\")",
      "   1 | sub(\"b\"; \"x\")"
    ],
    [
      "ababb\nbaabb"
    ]
  ],
  [
    "test",
    [
      "test(\"\")",
      "test(\"\"; \"g\", \"n\", \"gn\")",
      "test(\"()\")",
      "test(\"()\"; \"g\", \"n\", \"gn\")",
      "test(\"(a*)\")",
      "test(\"(a*)\"; \"g\", \"n\", \"gn\")",
      "test(\"(a)*\")",
      "test(\"(a)*\"; \"g\", \"n\", \"gn\")",
      "test(\"(?<c>)\")",
      "test(\"(?<c>)\"; \"g\", \"n\", \"gn\")",
      "test(\"(?<c>a*)\")",
      "test(\"(?<c>a*)\"; \"g\", \"n\", \"gn\")",
      "test(\"(?<c>a)*\")",
      "test(\"(?<c>a)*\"; \"g\", \"n\", \"gn\")",
      "test(\"(b)\")",
      "test(\"(b)\"; null)",
      "test(\"(b)\"; \"\")",
      "test(\"(b)\"; \"g\")",
      "test([\"(b)\", null])",
      "test([\"(b)\", \"\"])",
      "test([\"(b)\", \"g\"])",
      "test(\"(?<c>b)\")",
      "test(\"(?<c>b)\"; null)",
      "test(\"(?<c>b)\"; \"\")",
      "test(\"(?<c>b)\"; \"g\")",
      "test([\"(?<c>b)\", null])",
      "test([\"(?<c>b)\", \"\"])",
      "test([\"(?<c>b)\", \"g\"])",
      "test(\"b\")",
      "test(\"b()\")",
      "test(\"b(a*)\")",
      "test(\"b(a)*\")",
      "test(\"b(?<c>)\")",
      "test(\"b(?<c>a*)\")",
      "test(\"b(?<c>a)*\")",
      "test(\"a(?<c>b)\", [\"a(?<c>b)\", \"g\"])",
      "test(\".(?<c>b)\"; \"g\", \"gm\")",
      "test(\"(?<c>aB?)\", \"(?<c>bB?)\"; \"gg\", \"gi\")",
      ". + \"𝟘𝟙𝟚𝟛\" | test(\".(?<c>.)\"; \"g\")"
    ],
    [
      "",
      "ababb\nbaabb"
    ]
  ],
  [
    "test - errors",
    [
      "test(null)",
      "test(1)",
      "test([])",
      "test([null])",
      "test([1])",
      "test([\"b\", 1])",
      "test([\"b\", \"z\"])",
      "test(\"b\"; 1)",
      "test(\"b\"; \"z\")",
      "test(\"b(\")",
      "null | test(\"b\")",
      "   1 | test(\"b\")"
    ],
    [
      "ababb\nbaabb"
    ]
  ],
  [
    "tonumber",
    [
      "tonumber"
    ],
    [
      0, -1.23,
      "0", " 123", "-123 ", " +123 ",
      "1.23", "-1.23", "+1.23",
      "0.123", "-0.123", "+0.123",
      ".123", "-.123", "+.123",
      "123.", "-123.", "+123.",
      "0e3", "12E3", "-12e-3", "+12E+3",
      "1.2e3", "-1.2e3", "+1.2e-3", "-1.2e+3",
      "0.12e3", "-0.12e3", "+0.12e-3", "-0.12e+3",
      ".12e3", "-.12e3", "+.12e-3", "-.12e+3",
      "12.e3", "-12.e3", "+12.e-3", "-12.e+3"
    ]
  ],
  [
    "tonumber (Infinity)",
    [
      "tonumber | isinfinite"
    ],
    [
      "Infinity",
      " Infinity ",
      "-Infinity ",
      " +Infinity",
      "iNfInItY",
      " InFiNiTy ",
      "+iNfInItY ",
      " -InFiNiTy"
    ]
  ],
  [
    "tonumber (NaN)",
    [
      "tonumber | isnan"
    ],
    [
      "NaN",
      " NaN ",
      "-NaN ",
      " +NaN",
      "-nan ",
      " +nan",
      "+nAn ",
      " -nAn"
    ]
  ],
  [
    "tonumber - errors",
    [
      "tonumber"
    ],
    [
      null, false, "", " ", ".", "-.",
      "foo", "-foo", "+foo",
      "1a", "1.a", "1.2.", "1.2.3",
      "1e", ".e3", "-.e3", "1e2.3",
      "- 123", "--123",
      "+ 123", "+-123",
      "12 3", "12+3", "12-3",
      "- Infinity", "+ Infinity",
      "- NaN", "+ NaN",
      [], [1], {}, { "2": "3" }
    ]
  ],
  [
    "tostring",
    [
      "tostring",
      "[., {foo: .}, . | tostring] | tostring",
      "{(. | tostring): [.]} | tostring"
    ],
    [
      null, false, true, 0, -0, 123, -123, 1.23, -1.23, 0.123, -0.123,
      "", " ", "foo", " bar", "bar ", " baz ",
      [], {}
    ]
  ],
  [
    "with_entries",
    [
      "with_entries(.)",
      "with_entries({key})",
      "with_entries({key, value})",
      "with_entries({key: .value | tostring, value: .key})",
      "with_entries({key, value: .value | (. + 10)})",
      "with_entries({key, value: .value | (. + 10, . + 20)})",
      "with_entries({key, value: .value | empty})",
      "with_entries({key, value: .value | select(. < 2)})",
      "with_entries({key, value: .value | select(. < 2, . < 3)})",
      "{} | with_entries(.)",
      "[] | with_entries(.)",
      "[1, 2, 3, 0] | with_entries({key: .key | tostring, value})"
    ],
    [
      { "a": 1, "b": 2, "c": 3, "d": 0 }
    ]
  ],
  [
    "with_entries - errors",
    [
      "with_entries(.)"
    ],
    [
      null, false, 3, "foo",
      [1, 2, 3, 0]
    ]
  ],
  [
    "Additive inverse",
    [
      "-(1 + 3)",
      "-(-1)",
      ".a | -(.b)",
      "[--1]",
      "(--.a.b)",
      "(- -.a.b)",
      "(-- .a.b)"
    ],
    [
      { "a": { "b": 3 } },
      { "a": { "b": -3.1 } }
    ]
  ],
  [
    "Additive inverse - errors",
    [
      "-.a",
      "-.x",
      "(--.a)",
      "(--.x)"
    ],
    [
      { "a": { "b": 3 } }
    ]
  ],
  [
    "Array Construction",
    [
      "[]",
      "[4]"
    ],
    [
      [
        1
      ],
      {
        "a": "a"
      }
    ]
  ],
  [
    "Array/Object Value Iterator",
    [
      ".[]"
    ],
    [
      [1, -1],
      ["foo"],
      { "foo": 1, "bar": -5.3 },
      { "foo": [] }
    ]
  ],
  [
    "Array/Object Value Iterator 2",
    [
      ".[ ]",
      ".[\"foo\"][]",
      ".foo[]"
    ],
    [
      { "foo": [3, 3] }
    ]
  ],
  [
    "Array/Object Value Iterator 3",
    [
      ".[]?",
      ".[]?[]",
      ".[]? []",
      ".[] ?[]"
    ],
    [
      3
    ]
  ],
  [
    "Array/Object Value Iterator - errors",
    [
      ".[]"
    ],
    [
      3, "bar", null
    ]
  ],
  [
    "Pipe",
    [
      ".[] | .",
      ".[] | .name",
      ".[] | 1 + .age | 2"
    ],
    [
        [
        {"name": "Mary", "age": 22},
        {"name": "Rupert", "age": 29},
        {"name": "Jane", "age": 11},
        {"name": "John", "age": 42}
      ]
    ]
  ],
  ["Stream as object value", [
      "{names: .[] | .name}", "{\"names\": .[] | .name, \"ages\": .[] | .age}",
      "{\"names\": .[] | .name, \"x\": 3}",
      "{\"names\": 5.4, \"x\": .[] | .age}",
      "{names: 5.4, ages: .[] | .age, ages2: .[] | .id}"
  ], [
      [
        {"id": 0, "name": "Mary", "age": 22},
        {"id": 1, "name": "Rupert", "age": 29},
        {"id": 2, "name": "Jane", "age": 11},
        {"id": 3, "name": "John", "age": 42}
      ]
  ]]
]